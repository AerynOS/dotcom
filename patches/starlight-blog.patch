diff --git a/components/Preview.astro b/components/Preview.astro
index e7bfe0b71210a8a25f6bb9f019fc9509925e8f08..a00c193e4433c44c6d7f824fa6bb31b5d1b0ee9d 100644
--- a/components/Preview.astro
+++ b/components/Preview.astro
@@ -26,7 +26,7 @@ const Excerpt = await getBlogEntryExcerpt(entry)
     <Metadata entry={entry} {locale} />
   </header>
   <div class="sl-markdown-content">
-    {typeof Excerpt === 'string' ? <Markdown content={Excerpt} /> : <Excerpt />}
+    {typeof Excerpt === 'string' ? <Markdown content={Excerpt} /> : typeof Excerpt.__html === "string" ? <Fragment set:html={Excerpt.__html}/> : <Excerpt />}
   </div>
   <footer>
     <PostTags {entry} {locale} />
diff --git a/libs/content.ts b/libs/content.ts
index 7e9467ebbdae06ffc76220ad4b24f8942142aa48..ad692cd67e4c5b860d6408030f5857a6bd77a42d 100644
--- a/libs/content.ts
+++ b/libs/content.ts
@@ -4,6 +4,10 @@ import starlightConfig from 'virtual:starlight/user-config'
 import config from 'virtual:starlight-blog-config'
 import context from 'virtual:starlight-blog-context'
 
+import { experimental_AstroContainer as AstroContainer } from "astro/container";
+import { getContainerRenderer as getMDXRenderer } from "@astrojs/mdx";
+import { loadRenderers } from "astro:container";
+
 import type { StarlightBlogAuthor } from '../schema'
 
 import { getEntryAuthors } from './authors'
@@ -103,9 +107,11 @@ export function getBlogEntryMetadata(entry: StarlightBlogEntry, locale: Locale):
 }
 
 export async function getBlogEntries(locale: Locale): Promise<StarlightBlogEntry[]> {
-  if (blogEntriesPerLocale.has(locale)) {
-    return blogEntriesPerLocale.get(locale) as StarlightBlogEntry[]
-  }
+
+  // I get error "Blog post with slug '${slug}' not found."" if this is enabled, when I do a 'astro build' - dev mode works fine
+  // if (blogEntriesPerLocale.has(locale)) {
+  //   return blogEntriesPerLocale.get(locale) as StarlightBlogEntry[]
+  // }
 
   const docEntries = await getCollection('docs')
   const blogEntries: StarlightEntry[] = []
@@ -162,8 +168,25 @@ export async function getBlogEntryExcerpt(entry: StarlightBlogEntry) {
     return entry.data.excerpt
   }
 
-  const { Content } = await render(entry)
 
+  const moreTokens = ["<!--more-->", "<!-- more -->", "<more></more>"]
+  for (const token of moreTokens) {
+    if (entry.body.includes(token)) {
+      let url = getRelativeUrl(`/${entry.id}`)
+      
+      // this uses `Markdown from astro-remote` which desn't handle mdx
+      // return `${entry.body.split(token)[0]}\n[Read more](${url})`
+
+      // this uses `astro/container` which can handle mdx but renders the full page then extracts the excerpt
+      const renderers = await loadRenderers([getMDXRenderer()]);
+      const container = await AstroContainer.create({ renderers });
+      const { Content } = await render(entry)
+      const content = await container.renderToString(Content);
+      const excerpt = content.split(token)[0];
+      return {__html:`${excerpt}<p><a href="${url}">Read more</a></p>`}
+    }
+  }
+  const { Content } = await render(entry)
   return Content
 }
 
